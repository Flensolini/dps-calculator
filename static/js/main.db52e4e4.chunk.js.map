{"version":3,"sources":["components/inputs/StatInput.jsx","components/form/StatsForm.jsx","components/field/TextField.jsx","components/weight/StatsWeight.jsx","App.js","serviceWorker.js","index.js"],"names":["StatInput","props","label","max","value","onChange","className","min","type","event","target","StatsForm","spValue","critValue","hitValue","intValue","spChange","critChange","hitChange","intChange","TextField","StatsWeight","SP","crit","hit","int","totalHit","parseInt","totalCrit","totalDamage","actualHit","actualCrit","baseNumbers","extraCritNumbers","newCrit","extraHitNumbers","newHit","baseSim","roundNumber","num","Math","round","toFixed","critDiff","hitDiff","spellDiff","console","log","App","React","useState","setSP","setCrit","setHit","setInt","newVal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db52e4e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stat-input.scss\";\r\n\r\nconst StatInput = (props) => {\r\n  const { label, max, value, onChange } = props;\r\n\r\n  function handleChange(event) {\r\n\r\n    onChange(event.target.value);\r\n}\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <label className=\"label\">{label}</label>\r\n      <input min=\"0\" type=\"number\" max={max} className=\"input\" onChange={handleChange} value={value}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatInput.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  label: PropTypes.string,\r\n  max: PropTypes.number\r\n}\r\n\r\nexport default StatInput;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stats-form.scss\";\r\nimport StatInput from '../inputs/StatInput';\r\n\r\nconst StatsForm = (props) => {\r\n  const { spValue, critValue, hitValue, intValue, spChange, critChange, hitChange, intChange} = props;\r\n  return (\r\n    <div className=\"form\">\r\n        <StatInput onChange={spChange} value={spValue} label=\"Spell Power\" />\r\n        <StatInput onChange={critChange} value={critValue} label=\"Crit\" />\r\n        <StatInput onChange={hitChange} value={hitValue} max={100} label=\"Hit\"/>\r\n        <StatInput onChange={intChange} value={intValue} max={100} label=\"Int\"/>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatsForm.propTypes = {\r\n  spValue: PropTypes.string,\r\n  critValue: PropTypes.string,\r\n  hitValue: PropTypes.string,\r\n  intValue: PropTypes.string,\r\n  spChange: PropTypes.func,\r\n  critChange: PropTypes.func,\r\n  hitChange: PropTypes.func,\r\n  intChange: PropTypes.func,\r\n}\r\n\r\n\r\nexport default StatsForm;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./text-field.scss\";\r\n\r\nconst TextField = (props) => {\r\n  const { value, label } = props;\r\n  return (\r\n      <div className=\"field\">\r\n          <div className=\"field-label\">{label} = </div>\r\n          <div className=\"field-value\">{value} Spell Power</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nTextField.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n}\r\n\r\nexport default TextField;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stats-weight.scss\";\r\nimport TextField from \"../field/TextField\";\r\n\r\nconst StatsWeight = (props) => {\r\n\r\n  const { SP, crit, hit, int } = props;\r\n\r\n  const coefficient = 0.814;\r\n  const baseDamage = 457;\r\n\r\n  const totalHit = 17-parseInt(hit)\r\n  const totalCrit = parseInt(crit) + parseInt(int)/59.5;\r\n  const totalDamage = baseDamage + (coefficient * parseInt(SP));\r\n\r\n  const actualHit = (100-(totalHit))/100;\r\n  const actualCrit = totalCrit/100;\r\n\r\n  const baseNumbers = () => {\r\n    const numberOfCrits = 100 * actualCrit * actualHit;\r\n    const numberOfNonCrits = 100 * (1-actualCrit) * actualHit;\r\n    const numberOfHits = 100-(actualHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const extraCritNumbers = () => {\r\n    const newCrit = actualCrit + 0.01\r\n\r\n    const numberOfCrits = 100 * (newCrit) * actualHit;\r\n    const numberOfNonCrits = 100 * (1-newCrit) * actualHit;\r\n    const numberOfHits = 100-(actualHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const extraHitNumbers = () => {\r\n    const newHit = actualHit + 0.01\r\n\r\n    const numberOfCrits = 100 * actualCrit * newHit;\r\n    const numberOfNonCrits = 100 * (1-actualCrit) * newHit;\r\n    const numberOfHits = 100-(newHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const baseSim = () => {\r\n    const critDamage = baseNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = baseNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n    \r\n  }\r\n\r\n  const critSim = () => {\r\n    const critDamage = extraCritNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = extraCritNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n  }\r\n\r\n  const hitSim = () => {\r\n    const critDamage = extraHitNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = extraHitNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n  }\r\n\r\n  const spellSim = () => {\r\n    const critDamage = baseNumbers()[0]* (totalDamage + 8.14) * 2;\r\n    const nonCritDamage = baseNumbers()[1] * (totalDamage + 8.14);\r\n    return critDamage + nonCritDamage;\r\n    \r\n  }\r\n\r\n\r\n  const roundNumber = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2);\r\n  }\r\n\r\n  const critDiff = critSim() - baseSim()\r\n  const hitDiff = hitSim() - baseSim()\r\n  const spellDiff = spellSim() - baseSim()\r\n\r\n  console.log(critDiff/spellDiff * 10)\r\n\r\n  const critValue = roundNumber(critDiff/spellDiff * 10)\r\n  const hitValue = roundNumber(hitDiff/spellDiff * 10)\r\n  const intValue = roundNumber(critValue/59.5)\r\n\r\n  return (\r\n    <div className=\"weight\">\r\n        <TextField label=\"1% Crit\" value={critValue}></TextField>\r\n        <TextField label=\"1% Hit\" value={hitValue}></TextField>\r\n        <TextField label=\"1 Intellect\" value={intValue}></TextField>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatsWeight.propTypes = {\r\n  SP: PropTypes.number,\r\n  crit: PropTypes.number,\r\n  hit: PropTypes.number,\r\n  int: PropTypes.number,\r\n}\r\n\r\n\r\nexport default StatsWeight;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport StatsForm from \"./components/form/StatsForm\";\r\nimport StatsWeight from \"./components/weight/StatsWeight\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [SP, setSP] = React.useState(0);\r\n  const [crit, setCrit] = React.useState(0);\r\n  const [hit, setHit] = React.useState(0);\r\n  const [int, setInt] = React.useState(0);\r\n\r\n\r\n  const handleSPChange = (newVal) => {\r\n    setSP(newVal)\r\n  }\r\n  const handleCritChange = (newVal) => {\r\n    setCrit(newVal)\r\n  }\r\n  const handleHitChange = (newVal) => {\r\n    setHit(newVal)\r\n  }\r\n  const handleIntChange = (newVal) => {\r\n    setInt(newVal)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Lightweight Mage Tool</h1>\r\n      <div className=\"container\">\r\n        <StatsForm spChange={handleSPChange} critChange={handleCritChange} hitChange={handleHitChange} intChange={handleIntChange} spValue={SP} critValue={crit} hitValue={hit} intValue={int}/>\r\n        <StatsWeight SP={SP} crit={crit} hit={hit} int={int}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}