{"version":3,"sources":["components/inputs/StatInput.jsx","components/form/StatsForm.jsx","components/field/TextField.jsx","components/weight/StatsWeight.jsx","components/checkbox/Checkbox.jsx","components/buffs/Buffs.jsx","App.js","serviceWorker.js","index.js"],"names":["StatInput","props","name","label","max","value","onChange","className","min","type","event","StatsForm","values","handleChange","SP","crit","hit","int","TextField","StatsWeight","buffs","ony","zandalar","songflower","dmt","dmf","gae","efp","flaskSP","wc","ai","BOK","motw","totalInt","parseInt","totalSpellDamage","totalHit","totalCrit","totalDamage","actualHit","actualCrit","baseNumbers","extraCritNumbers","newCrit","extraHitNumbers","newHit","baseSim","roundNumber","num","Math","round","toFixed","critDiff","hitDiff","spellDiff","critValue","hitValue","intValue","Checkbox","Buffs","App","React","useState","setValues","setBuffs","e","target","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4676b6a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stat-input.scss\";\r\n\r\nconst StatInput = (props) => {\r\n  const { name, label, max, value, onChange } = props;\r\n\r\n  function handleChange(event) {\r\n\r\n    onChange(event);\r\n}\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <label className=\"label\">{label}</label>\r\n      <input name={name} min=\"0\" type=\"number\" max={max} className=\"input\" onChange={handleChange} value={value}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatInput.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  label: PropTypes.string,\r\n  max: PropTypes.number\r\n}\r\n\r\nexport default StatInput;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stats-form.scss\";\r\nimport StatInput from '../inputs/StatInput';\r\n\r\nconst StatsForm = (props) => {\r\n  const { values, handleChange} = props;\r\n  return (\r\n    <div className=\"form\">\r\n        <StatInput onChange={handleChange} name=\"SP\" value={values.SP} label=\"Spell Power\" />\r\n        <StatInput onChange={handleChange} name=\"crit\" value={values.crit} label=\"Crit\" />\r\n        <StatInput onChange={handleChange} name=\"hit\" value={values.hit} max={100} label=\"Hit\"/>\r\n        <StatInput onChange={handleChange} name=\"int\" value={values.int} max={100} label=\"Int\"/>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatsForm.propTypes = {\r\n  values: PropTypes.object,\r\n  handleChange: PropTypes.func,\r\n}\r\n\r\n\r\nexport default StatsForm;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./text-field.scss\";\r\n\r\nconst TextField = (props) => {\r\n  const { value, label } = props;\r\n  return (\r\n      <div className=\"field\">\r\n          <div className=\"field-label\">{label} = </div>\r\n          <div className=\"field-value\">{value} Spell Power</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nTextField.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n}\r\n\r\nexport default TextField;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./stats-weight.scss\";\r\nimport TextField from \"../field/TextField\";\r\n\r\nconst StatsWeight = (props) => {\r\n\r\n  const { SP, crit, hit, int } = props.values;\r\n  const { ony, zandalar, songflower, dmt, dmf, gae, efp, flaskSP, wc, ai, BOK, motw} = props.buffs;\r\n\r\n  const coefficient = 0.814;\r\n  const baseDamage = 457;\r\n\r\n  const totalInt = (parseInt(int) + (ai ? 31 : 0) + (motw ? 12 : 0)) * (zandalar ? 1.15 : 1) * (BOK ? 1.1 : 1)\r\n  const totalSpellDamage = parseInt(SP) + (gae ? 35 : 0) + (efp ? 15 : 0) + (flaskSP ? 150 : 0);\r\n  const totalHit = 17-parseInt(hit)\r\n  const totalCrit = parseInt(crit) + totalInt/59.5 + (ony ? 10 : 0) + (songflower ? 5 : 0) + (dmt ? 3 : 0) + (wc ? 10: 0);\r\n  const totalDamage = (baseDamage + (coefficient * totalSpellDamage)) * (dmf ? 1.1 : 1);\r\n\r\n  const actualHit = (100-(totalHit))/100;\r\n  const actualCrit = totalCrit/100;\r\n\r\n  const baseNumbers = () => {\r\n    const numberOfCrits = 100 * actualCrit * actualHit;\r\n    const numberOfNonCrits = 100 * (1-actualCrit) * actualHit;\r\n    const numberOfHits = 100-(actualHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const extraCritNumbers = () => {\r\n    const newCrit = actualCrit + 0.01\r\n\r\n    const numberOfCrits = 100 * (newCrit) * actualHit;\r\n    const numberOfNonCrits = 100 * (1-newCrit) * actualHit;\r\n    const numberOfHits = 100-(actualHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const extraHitNumbers = () => {\r\n    const newHit = actualHit + 0.01\r\n\r\n    const numberOfCrits = 100 * actualCrit * newHit;\r\n    const numberOfNonCrits = 100 * (1-actualCrit) * newHit;\r\n    const numberOfHits = 100-(newHit*100);\r\n    return [ numberOfCrits, numberOfNonCrits, numberOfHits ]\r\n  }\r\n\r\n  const baseSim = () => {\r\n    const critDamage = baseNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = baseNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n    \r\n  }\r\n\r\n  const critSim = () => {\r\n    const critDamage = extraCritNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = extraCritNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n  }\r\n\r\n  const hitSim = () => {\r\n    const critDamage = extraHitNumbers()[0]* totalDamage * 2;\r\n    const nonCritDamage = extraHitNumbers()[1] * totalDamage;\r\n    return critDamage + nonCritDamage;\r\n  }\r\n\r\n  const spellSim = () => {\r\n    const critDamage = baseNumbers()[0]* (totalDamage + 8.14) * 2;\r\n    const nonCritDamage = baseNumbers()[1] * (totalDamage + 8.14);\r\n    return critDamage + nonCritDamage;\r\n    \r\n  }\r\n\r\n\r\n  const roundNumber = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2);\r\n  }\r\n\r\n  const critDiff = critSim() - baseSim()\r\n  const hitDiff = hitSim() - baseSim()\r\n  const spellDiff = spellSim() - baseSim()\r\n\r\n\r\n  const critValue = roundNumber(critDiff/spellDiff * 10)\r\n  const hitValue = roundNumber(hitDiff/spellDiff * 10)\r\n  const intValue = roundNumber(critValue/59.5)\r\n\r\n  return (\r\n    <div className=\"weight\">\r\n        <TextField label=\"1% Crit\" value={critValue}></TextField>\r\n        <TextField label=\"1% Hit\" value={hitValue}></TextField>\r\n        <TextField label=\"1 Intellect\" value={intValue}></TextField>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatsWeight.propTypes = {\r\n  values: PropTypes.object,\r\n  buffs: PropTypes.object,\r\n}\r\n\r\n\r\nexport default StatsWeight;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./checkbox.scss\";\r\n\r\nconst Checkbox = (props) => {\r\n  const { name, label, value, onChange } = props;\r\n\r\n  function handleChange(event) {\r\n\r\n    onChange(event);\r\n}\r\n  return (\r\n    <label className=\"checkbox-wrapper\">{label}\r\n        <input name={name} type=\"checkbox\" onChange={handleChange} value={value}/>\r\n        <span className=\"checkmark\"></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  label: PropTypes.string,\r\n}\r\n\r\nexport default Checkbox;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./buffs.scss\";\r\nimport Checkbox from \"../checkbox/Checkbox\";\r\n\r\nconst Buffs = (props) => {\r\n  const { handleChange, values } = props;\r\n  return (\r\n    <div className=\"buffs\">\r\n        <div className=\"buff-category\">\r\n            <h2>World Buffs</h2>\r\n            <Checkbox name=\"ony\" value={values.ony} onChange={handleChange} label=\"Onyxia Buff\"/>\r\n            <Checkbox name=\"zandalar\" value={values.zandalar} onChange={handleChange} label=\"Spirit of Zandalar\"/>\r\n            <Checkbox name=\"dmt\" value={values.dmt} onChange={handleChange} label=\"Dire Maul Tribute (3% crit)\"/>\r\n            <Checkbox name=\"dmf\" value={values.dmf} onChange={handleChange} label=\"Darkmoon Faire (10% Damage)\"/>\r\n            <Checkbox name=\"songflower\" value={values.songflower} onChange={handleChange} label=\"Songflower Serenade\"/>\r\n        </div>\r\n        <div className=\"buff-category\">\r\n            <h2>Flasks and Elixirs</h2>\r\n            <Checkbox name=\"gae\" value={values.gae} onChange={handleChange} label=\"Greater Arcane Elixir\"/>\r\n            <Checkbox name=\"efp\" value={values.efp} onChange={handleChange} label=\"Elixir of Frost Power\"/>\r\n            <Checkbox name=\"flaskSP\" value={values.flaskSP} onChange={handleChange} label=\"Flask of Supreme Power\"/>\r\n        </div>\r\n        <div className=\"buff-category\">\r\n            <h2>Class Buffs</h2>\r\n            <Checkbox name=\"wc\" value={values.wc} onChange={handleChange} label=\"Winter's Chill\"/>\r\n            <Checkbox name=\"ai\" value={values.ai} onChange={handleChange} label=\"Arcane Intellect\"/>\r\n            <Checkbox name=\"BOK\" value={values.BOK} onChange={handleChange} label=\"Blessing of Kings\"/>\r\n            <Checkbox name=\"motw\" value={values.motw} onChange={handleChange} label=\"Mark of the Wild\"/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBuffs.propTypes = {\r\n    values: PropTypes.object,\r\n    handleChange: PropTypes.func,\r\n}\r\n\r\nexport default Buffs;","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport StatsForm from \"./components/form/StatsForm\";\r\nimport StatsWeight from \"./components/weight/StatsWeight\";\r\nimport Buffs from \"./components/buffs/Buffs\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [values, setValues] = React.useState({\r\n    SP: 0,\r\n    crit: 0,\r\n    hit: 0,\r\n    int: 0\r\n  })\r\n\r\n  const [buffs, setBuffs] = React.useState({\r\n    ony: false,\r\n    zandalar: false,\r\n    songflower: false,\r\n    dmt: false,\r\n    dmf: false,\r\n    gae: false,\r\n    efp: false,\r\n    flaskSP: false,\r\n    wc: false,\r\n    ai: false,\r\n    BOK: false,\r\n    motw: false,\r\n  })\r\n\r\n  const handleValuesChange = e => {\r\n    const {name , value} = e.target\r\n    setValues( prevState => ({\r\n        ...prevState,\r\n        [name] : value\r\n    }))\r\n  }\r\n\r\n  const handleBuffsChange = e => {\r\n    const {name} = e.target\r\n    setBuffs( prevState => ({\r\n        ...prevState,\r\n        [name] : !prevState[name]\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Lightweight Mage Tool</h1>\r\n      <div className=\"container\">\r\n        <Buffs handleChange={handleBuffsChange} values={buffs}/>\r\n        <StatsForm handleChange={handleValuesChange} values={values}/>\r\n        <StatsWeight buffs={buffs} values={values}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}